We are building the Vibecoding RGBW Control App.

üß† Context:
This project is a live demo web app that uses webcam input to extract dominant colors and control a Shelly Duo GU10 RGBW bulb over the local network via HTTP.

üìÑ Instructions:
Follow `.github/copilot-instructions.md`. Do not repeat or reinterpret the requirements‚Äîuse the guidelines as the single source of truth.

üß™ Use Context7 MCP for all code involving Java, Spring Boot, HTML/DOM APIs.

---

‚úÖ Let‚Äôs begin step by step:

1. Think out loud: describe the responsibilities of the backend.
2. Outline the structure of the backend (main class, controller).
3. Implement the `POST /color` endpoint using Spring Boot 3.5 and Java 21.
4. Use `RestClient` to send the appropriate query parameters to the bulb.
6. Once backend is complete, move to frontend HTML/JS.

‚ö†Ô∏è Constraints:
- No mDNS, no WebSockets, no databases, no Docker.
- Frontend is HTML + JS, optionally `htm/preact` or `lit-html` from CDN only.
- The whole app runs locally for demo purposes.

---


# Follow up prompt

–°urrently we use hadcoded IP for light bulb in the application properties. 
Shelly bulb supports discovery via mdns. 
Implement logic using jmdns library (ask context7 for documentation). 
- Make sure don't bind to localhost interface (it wont' be able to dicover in local network).
- Add discovery status and the disovered bulb ip somewhere on the screen.